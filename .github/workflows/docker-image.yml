name: Docker Image CI/CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "oracle"
          java-version: "21"

      - name: Build JAR file
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/be_swp:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/be_swp:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: '34.142.180.62'  # Your server's public IP
          username: 'tamhmse162189'  # SSH user
          key: ${{ secrets.SERVER_SSH_KEY }}  # SSH private key stored as GitHub secret
          use_insecure_cipher: true
          debug: true
          script: |
            echo "üöÄ Starting deployment..."

            # Change timezone to Vietnam (UTC+7)
            echo "üåç Setting timezone to Asia/Ho_Chi_Minh..."
            sudo timedatectl set-timezone Asia/Ho_Chi_Minh

            # Backup authorized_keys before deploy
            echo "üîë Backing up authorized_keys..."
            cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys.bak

            # Check and set permissions for SSH folder
            chmod 700 ~/.ssh
            chmod 600 ~/.ssh/authorized_keys

            # Stop and remove old container (be_swp) if it exists
            if docker ps -a --format '{{.Names}}' | grep -q '^be_swp$'; then
              echo "üõë Stopping and removing old be_swp container..."
              docker stop be_swp
              docker rm be_swp
            fi

            # Create Docker network if it doesn't exist
            if ! docker network ls --format '{{.Name}}' | grep -q '^app-network$'; then
              echo "üåê Creating Docker network 'app-network'..."
              docker network create app-network
            fi

            # Connect existing MySQL container to network
            if docker ps -a --format '{{.Names}}' | grep -q '^mysql8-container$'; then
              echo "üîó Connecting existing MySQL container to network..."
              docker network connect app-network mysql8-container || echo "MySQL already connected or unavailable"
            fi

            # Pull the latest Docker image
            echo "üì¶ Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/be_swp:latest

            # Run new container with the network to connect MySQL
            echo "üö¢ Starting new container..."
            docker run -d \
              --name be_swp \
              -p 8080:8080 \
              --restart always \
              --network app-network \
              -v ~/.ssh:/root/.ssh \
              ${{ secrets.DOCKER_USERNAME }}/be_swp:latest

            # Restore authorized_keys if it's lost
            if [ ! -f ~/.ssh/authorized_keys ]; then
              echo "üîÑ Restoring authorized_keys..."
              cp ~/.ssh/authorized_keys.bak ~/.ssh/authorized_keys
            fi

            # Check permissions on the SSH directory after restore
            chmod 700 ~/.ssh
            chmod 600 ~/.ssh/authorized_keys

            echo "‚úÖ Deployment completed successfully!"
